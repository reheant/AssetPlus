class MaintenanceTicket {

  status {
    Open {
      assignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) / {
        doAssignHotelStaff(hotelStaff, timeToResolve, priority, approvalRequired);
      } -> Assigned;
      startTask() / {rejectStart("Open");} -> Open;
      completeTask() / {rejectComplete("Open");} -> Open;
      disapprove(Date date, String reason) / {rejectDisapprove("Open");} -> Open;
      approve() / {rejectApprove("Open");} -> Open;
    }
    Assigned {
      startTask() -> InProgress;
      assignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) / {
        rejectAssign("Assigned");
      } -> Assigned;
      completeTask() / {rejectComplete("Assigned");} -> Assigned;
      disapprove(Date date, String reason) / {rejectDisapprove("Assigned");} -> Assigned;
      approve() / {rejectApprove("Assigned");} -> Assigned;

    }
    InProgress {
      completeTask() [isApprovalRequired()] -> Resolved;
      completeTask() [!isApprovalRequired()] -> Closed;
      assignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) / {
        rejectAssign("InProgress");
      } -> InProgress;
      startTask() / {rejectStart("InProgress");} -> InProgress;
      disapprove(Date date, String reason) / {rejectDisapprove("InProgress");} -> InProgress;
      approve() / {rejectApprove("InProgress");} -> InProgress;
    }
    Resolved {
      approve() -> Closed;
      disapprove(Date date, String reason) / {
        doAddMaintenanceNote(date, reason);
      } -> InProgress;
      assignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) / {
        rejectAssign("Resolved");
      } -> Resolved;
      startTask() / {rejectStart("Resolved");} -> Resolved;
      completeTask() / {rejectComplete("Resolved");} -> Resolved;
    }
    Closed {
      assignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) / {
        rejectAssign("Closed");
      } -> Closed;
      startTask() / {rejectStart("Closed");} -> Closed;
      completeTask() / {rejectComplete("Closed");} -> Closed;
      disapprove(Date date, String reason) / {rejectDisapprove("Closed");} -> Closed;
      approve() / {rejectApprove("Closed");} -> Closed;
    }
  }

  /**
   * Assigns maintenance ticket to a  hotel staff
   * 
   * @author Rehean Thillainathalingam
   * @param priority The priority level of the ticket
   * @param timeEstimate The time estimate of the ticket
   * @param ticketFixer The assigned hotel staff
   * @param approvalRequired Boolean if manager approval is required or not
   */

  private void doAssignHotelStaff(HotelStaff hotelStaff, TimeEstimate timeToResolve, PriorityLevel priority, boolean approvalRequired) {
    MaintenanceTicket ticket = this;
    ticket.setPriority(priority);
    ticket.setTicketFixer(hotelStaff);
    ticket.setTimeToResolve(timeToResolve);
    if (approvalRequired) {
      AssetPlus assetPlus = ticket.getAssetPlus();
      Manager manager = assetPlus.getManager();
      ticket.setFixApprover(manager);
    }
    

  }
  /**
   * Assigns maintenance ticket to a  hotel staff
   * 
   * @author Rehean Thillainathalingam
   * @return boolean indicating if the ticket has an approver
   */
  private boolean isApprovalRequired() {
    MaintenanceTicket ticket = this;
    return ticket.hasFixApprover();
  }

  /**
   * Assigns maintenance ticket to a  hotel staff
   * 
   * @author Rehean Thillainathalingam
   * @param date Date note was created
   * @param reason Maintenance note description
   */
  private void doAddMaintenanceNote(Date date, String reason) {
    MaintenanceTicket ticket = this;
    HotelStaff hotelStaff = ticket.getTicketFixer();
    ticket.addTicketNote(date, reason, hotelStaff);
  }

  /**
   * Error handling for transitions  
   * 
   * @author Rehean Thillainathalingam
   * @param string State string in which the function was called
   */
  private void rejectAssign(String state) {
        String message = "";
        if (state.equals("Assigned")) {
          message = "The maintenance ticket is already assigned.";
        } else if (state.equals("Resolved")) {
          message = "Cannot assign a maintenance ticket which is resolved.";
        } else if (state.equals("Closed")) {
          message = "Cannot assign a maintenance ticket which is closed.";
        } else if (state.equals("InProgress")) {
          message = "Cannot assign a maintenance ticket which is in progress.";
        }
        throw new RuntimeException(message);
    }
  /**
   * Error handling for transitions  
   * 
   * @author Rehean Thillainathalingam
   * @param string State string in which the function was called
   */
  private void rejectStart(String state) {
        String message = "";
        if (state.equals("Open")) {
          message = "Cannot start a maintenance ticket which is open.";
        } else if (state.equals("Resolved")) {
          message = "Cannot start a maintenance ticket which is resolved.";
        } else if (state.equals("Closed")) {
          message = "Cannot start a maintenance ticket which is closed.";
        } else if (state.equals("InProgress")) {
          message = "The maintenance ticket is already in progress.";
        }
        throw new RuntimeException(message);
    }
  /**
   * Error handling for transitions  
   * 
   * @author Rehean Thillainathalingam
   * @param string State string in which the function was called
   */
  private void rejectComplete(String state) {
        String message = "";
        if (state.equals("Open")) {
          message = "Cannot complete a maintenance ticket which is open.";
        } else if (state.equals("Assigned")) {
          message = "Cannot complete a maintenance ticket which is assigned.";
        } else if (state.equals("Closed")) {
          message = "The maintenance ticket is already closed.";
        } else if (state.equals("Resolved")) {
          message = "The maintenance ticket is already resolved.";
        }
        throw new RuntimeException(message);
    }
  /**
   * Error handling for transitions  
   * 
   * @author Rehean Thillainathalingam
   * @param string State string in which the function was called
   */
  private void rejectDisapprove(String state) {
        String message = "";
        if (state.equals("Open")) {
          message = "Cannot disapprove a maintenance ticket which is open.";
        } else if (state.equals("Assigned")) {
          message = "Cannot disapprove a maintenance ticket which is assigned.";
        } else if (state.equals("Closed")) {
          message = "Cannot disapprove a maintenance ticket which is closed.";
        } else if (state.equals("InProgress")) {
          message = "Cannot disapprove a maintenance ticket which is in progress.";
        }
        throw new RuntimeException(message);
    }
  /**
   * Error handling for transitions  
   * 
   * @author Rehean Thillainathalingam
   * @param string State string in which the function was called
   */
  private void rejectApprove(String state) {
        String message = "";
        if (state.equals("Open")) {
          message = "Cannot approve a maintenance ticket which is open.";
        } else if (state.equals("Assigned")) {
          message = "Cannot approve a maintenance ticket which is assigned.";
        } else if (state.equals("Closed")) {
          message = "The maintenance ticket is already closed.";
        } else if (state.equals("InProgress")) {
          message = "Cannot approve a maintenance ticket which is in progress.";
        }
        throw new RuntimeException(message);
    }

}